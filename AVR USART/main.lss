
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00000512  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001a1  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b60  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000316  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000627  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002a9  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003e4  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__bad_interrupt>
   4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
   6:	4c c0       	rjmp	.+152    	; 0xa0 <__bad_interrupt>
   8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
   a:	4a c0       	rjmp	.+148    	; 0xa0 <__bad_interrupt>
   c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
   e:	48 c0       	rjmp	.+144    	; 0xa0 <__bad_interrupt>
  10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
  12:	46 c0       	rjmp	.+140    	; 0xa0 <__bad_interrupt>
  14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
  16:	44 c0       	rjmp	.+136    	; 0xa0 <__bad_interrupt>
  18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
  1a:	42 c0       	rjmp	.+132    	; 0xa0 <__bad_interrupt>
  1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
  1e:	40 c0       	rjmp	.+128    	; 0xa0 <__bad_interrupt>
  20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
  22:	3e c0       	rjmp	.+124    	; 0xa0 <__bad_interrupt>
  24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
  26:	3c c0       	rjmp	.+120    	; 0xa0 <__bad_interrupt>
  28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>

0000002a <LcdCustomChar>:
  2a:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  3a:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  4a:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  5a:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d2 e0       	ldi	r29, 0x02	; 2
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e6 e6       	ldi	r30, 0x66	; 102
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a8 37       	cpi	r26, 0x78	; 120
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a8 e7       	ldi	r26, 0x78	; 120
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 37       	cpi	r26, 0x7E	; 126
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	17 d0       	rcall	.+46     	; 0xcc <main>
  9e:	e2 c1       	rjmp	.+964    	; 0x464 <_exit>

000000a0 <__bad_interrupt>:
  a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <USART_Init>:
int Uart_PutChar (char c, FILE *stream);
FILE uart_str = FDEV_SETUP_STREAM(Uart_PutChar, NULL, _FDEV_SETUP_WRITE);

void USART_Init(void)
{	               
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	89 b9       	out	0x09, r24	; 9
UBRRL=UBRRVAL;		
UBRRH=(UBRRVAL>>8);	
  a6:	10 bc       	out	0x20, r1	; 32
UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);			
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<TXEN);
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	08 95       	ret

000000b2 <Uart_PutChar>:
}

int Uart_PutChar (char c, FILE *stream)
 { 
  b2:	1f 93       	push	r17
  b4:	18 2f       	mov	r17, r24
    if (c == '\n')
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	11 f4       	brne	.+4      	; 0xbe <Uart_PutChar+0xc>
    Uart_PutChar('\r', stream);
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	fa df       	rcall	.-12     	; 0xb2 <Uart_PutChar>
    loop_until_bit_is_set(UCSRA,UDRE); 
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <Uart_PutChar+0xc>
    UDR = c; 
  c2:	1c b9       	out	0x0c, r17	; 12
    return 0; 
 }
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	1f 91       	pop	r17
  ca:	08 95       	ret

000000cc <main>:


int main(void)
{
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	89 b9       	out	0x09, r24	; 9
  d0:	10 bc       	out	0x20, r1	; 32
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	8a b9       	out	0x0a, r24	; 10

USART_Init();
stdout=&uart_str;
  da:	89 e6       	ldi	r24, 0x69	; 105
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 7b 00 	sts	0x007B, r25
  e2:	80 93 7a 00 	sts	0x007A, r24
LCDinit();
  e6:	20 d1       	rcall	.+576    	; 0x328 <LCDinit>
LCDclr();
  e8:	3c d0       	rcall	.+120    	; 0x162 <LCDclr>
LCDstring("USART",5);
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	80 e6       	ldi	r24, 0x60	; 96
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	3e d0       	rcall	.+124    	; 0x16e <LCDstring>
while(1)	
{
printf("hi\n");
  f2:	86 e6       	ldi	r24, 0x66	; 102
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	5c d1       	rcall	.+696    	; 0x3b0 <puts>
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <main+0x26>

000000fa <LCDsendChar>:
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
  fa:	98 2f       	mov	r25, r24
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	92 bb       	out	0x12, r25	; 18

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
	LCP|=1<<LCD_RS;
 100:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 102:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 104:	e0 ea       	ldi	r30, 0xA0	; 160
 106:	ff e0       	ldi	r31, 0x0F	; 15
 108:	df 01       	movw	r26, r30
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 10e:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 110:	a8 98       	cbi	0x15, 0	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 112:	df 01       	movw	r26, r30
 114:	11 97       	sbiw	r26, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 118:	82 95       	swap	r24
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_RS;
 11e:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 120:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 122:	cf 01       	movw	r24, r30
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDsendChar+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 128:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 12a:	a8 98       	cbi	0x15, 0	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDsendChar+0x32>
 130:	08 95       	ret

00000132 <LCDsendCommand>:
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
	LCP|=1<<LCD_RS;
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
 132:	98 2f       	mov	r25, r24
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	92 bb       	out	0x12, r25	; 18
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
	LCP|=1<<LCD_E;		
 138:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	e0 ea       	ldi	r30, 0xA0	; 160
 13c:	ff e0       	ldi	r31, 0x0F	; 15
 13e:	df 01       	movw	r26, r30
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 144:	aa 98       	cbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	df 01       	movw	r26, r30
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 14c:	82 95       	swap	r24
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	82 bb       	out	0x12, r24	; 18
	LCP|=1<<LCD_E;		
 152:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 154:	cf 01       	movw	r24, r30
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDsendCommand+0x24>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 15a:	aa 98       	cbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDsendCommand+0x2a>
 160:	08 95       	ret

00000162 <LCDclr>:
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
	LCP=0x00;
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}


#else
	//8 bit part
	_delay_ms(15);
	LDP=0x00;
	LCP=0x00;
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
   //-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
			|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(5);
		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
void LCDclr(void)				//Clears LCD
{
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	e6 df       	rcall	.-52     	; 0x132 <LCDsendCommand>
 166:	08 95       	ret

00000168 <LCDhome>:
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	e3 df       	rcall	.-58     	; 0x132 <LCDsendCommand>
 16c:	08 95       	ret

0000016e <LCDstring>:
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 17a:	89 2b       	or	r24, r25
 17c:	51 f0       	breq	.+20     	; 0x192 <LCDstring+0x24>
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	06 c0       	rjmp	.+12     	; 0x18e <LCDstring+0x20>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 182:	fe 01       	movw	r30, r28
 184:	e1 0f       	add	r30, r17
 186:	f1 1d       	adc	r31, r1
 188:	80 81       	ld	r24, Z
 18a:	b7 df       	rcall	.-146    	; 0xfa <LCDsendChar>
 18c:	1f 5f       	subi	r17, 0xFF	; 255
 18e:	10 17       	cp	r17, r16
 190:	c1 f7       	brne	.-16     	; 0x182 <LCDstring+0x14>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <LCDGotoXY>:
	}
}
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	31 f0       	breq	.+12     	; 0x1ac <LCDGotoXY+0x10>
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1a0:	63 30       	cpi	r22, 0x03	; 3
 1a2:	31 f0       	breq	.+12     	; 0x1b0 <LCDGotoXY+0x14>
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	29 f4       	brne	.+10     	; 0x1b2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1a8:	80 5c       	subi	r24, 0xC0	; 192
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ac:	8c 5e       	subi	r24, 0xEC	; 236
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1b0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	be df       	rcall	.-132    	; 0x132 <LCDsendCommand>
 1b6:	08 95       	ret

000001b8 <CopyStringtoLCD>:
	
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	8c 01       	movw	r16, r24
 1c2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 1c4:	64 2f       	mov	r22, r20
 1c6:	ea df       	rcall	.-44     	; 0x19c <LCDGotoXY>
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <CopyStringtoLCD+0x18>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1ce:	95 df       	rcall	.-214    	; 0xfa <LCDsendChar>
 1d0:	f8 01       	movw	r30, r16
 1d2:	ec 0f       	add	r30, r28
 1d4:	f1 1d       	adc	r31, r1
 1d6:	84 91       	lpm	r24, Z
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	88 23       	and	r24, r24
 1dc:	c1 f7       	brne	.-16     	; 0x1ce <CopyStringtoLCD+0x16>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <LCDdefinechar>:
	}
}
//defines char symbol in CGRAM
/*
const uint8_t backslash[] PROGMEM= 
{
0b00000000,//back slash
0b00010000,
0b00001000,
0b00000100,
0b00000010,
0b00000001,
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	06 2f       	mov	r16, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1f6:	00 0f       	add	r16, r16
 1f8:	00 0f       	add	r16, r16
 1fa:	00 0f       	add	r16, r16
 1fc:	00 64       	ori	r16, 0x40	; 64
 1fe:	ee 24       	eor	r14, r14
 200:	ff 24       	eor	r15, r15
 202:	ec 01       	movw	r28, r24
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 204:	fe 01       	movw	r30, r28
 206:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 208:	80 2f       	mov	r24, r16
 20a:	8e 0d       	add	r24, r14
 20c:	92 df       	rcall	.-220    	; 0x132 <LCDsendCommand>
		LCDsendChar(pcc);
 20e:	81 2f       	mov	r24, r17
 210:	74 df       	rcall	.-280    	; 0xfa <LCDsendChar>
 212:	08 94       	sec
 214:	e1 1c       	adc	r14, r1
 216:	f1 1c       	adc	r15, r1
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	f8 e0       	ldi	r31, 0x08	; 8
 21c:	ef 16       	cp	r14, r31
 21e:	f1 04       	cpc	r15, r1
 220:	89 f7       	brne	.-30     	; 0x204 <LCDdefinechar+0x1c>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	08 95       	ret

00000230 <LCDshiftLeft>:
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	08 2f       	mov	r16, r24
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCDshiftLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 23a:	8e e1       	ldi	r24, 0x1E	; 30
 23c:	7a df       	rcall	.-268    	; 0x132 <LCDsendCommand>
 23e:	1f 5f       	subi	r17, 0xFF	; 255
 240:	10 17       	cp	r17, r16
 242:	d9 f7       	brne	.-10     	; 0x23a <LCDshiftLeft+0xa>
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <LCDshiftRight>:
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	08 2f       	mov	r16, r24
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	03 c0       	rjmp	.+6      	; 0x25a <LCDshiftRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	6d df       	rcall	.-294    	; 0x132 <LCDsendCommand>
 258:	1f 5f       	subi	r17, 0xFF	; 255
 25a:	10 17       	cp	r17, r16
 25c:	d9 f7       	brne	.-10     	; 0x254 <LCDshiftRight+0xa>
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <LCDcursorOn>:
	}
}
void LCDcursorOn(void) //displays LCD cursor
{
 264:	8e e0       	ldi	r24, 0x0E	; 14
 266:	65 df       	rcall	.-310    	; 0x132 <LCDsendCommand>
 268:	08 95       	ret

0000026a <LCDcursorOnBlink>:
	LCDsendCommand(0x0E);
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	62 df       	rcall	.-316    	; 0x132 <LCDsendCommand>
 26e:	08 95       	ret

00000270 <LCDcursorOFF>:
	LCDsendCommand(0x0F);
}
void LCDcursorOFF(void)	//turns OFF cursor
{
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	5f df       	rcall	.-322    	; 0x132 <LCDsendCommand>
 274:	08 95       	ret

00000276 <LCDblank>:
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	5c df       	rcall	.-328    	; 0x132 <LCDsendCommand>
 27a:	08 95       	ret

0000027c <LCDvisible>:
	LCDsendCommand(0x08);
}
void LCDvisible(void)		//Shows LCD
{
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	59 df       	rcall	.-334    	; 0x132 <LCDsendCommand>
 280:	08 95       	ret

00000282 <LCDcursorLeft>:
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	08 2f       	mov	r16, r24
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	03 c0       	rjmp	.+6      	; 0x292 <LCDcursorLeft+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	51 df       	rcall	.-350    	; 0x132 <LCDsendCommand>
 290:	1f 5f       	subi	r17, 0xFF	; 255
 292:	10 17       	cp	r17, r16
 294:	d9 f7       	brne	.-10     	; 0x28c <LCDcursorLeft+0xa>
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <LCDcursorRight>:
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	08 2f       	mov	r16, r24
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCDcursorRight+0x10>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 2a6:	84 e1       	ldi	r24, 0x14	; 20
 2a8:	44 df       	rcall	.-376    	; 0x132 <LCDsendCommand>
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	10 17       	cp	r17, r16
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <LCDcursorRight+0xa>
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <LCDprogressBar>:
	}
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	f4 2e       	mov	r15, r20
	uint8_t i;
	uint16_t pixelprogress;
	uint8_t c;

	// draw a progress bar displaying (progress / maxprogress)
	// starting from the current cursor position
	// with a total length of "length" characters
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 2c2:	24 2f       	mov	r18, r20
 2c4:	33 27       	eor	r19, r19
 2c6:	96 e0       	ldi	r25, 0x06	; 6
 2c8:	89 9f       	mul	r24, r25
 2ca:	c0 01       	movw	r24, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	77 27       	eor	r23, r23
 2d0:	ac 01       	movw	r20, r24
 2d2:	24 9f       	mul	r18, r20
 2d4:	c0 01       	movw	r24, r0
 2d6:	25 9f       	mul	r18, r21
 2d8:	90 0d       	add	r25, r0
 2da:	34 9f       	mul	r19, r20
 2dc:	90 0d       	add	r25, r0
 2de:	11 24       	eor	r1, r1
 2e0:	ae d0       	rcall	.+348    	; 0x43e <__divmodhi4>
 2e2:	eb 01       	movw	r28, r22
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 2e4:	cb 01       	movw	r24, r22
 2e6:	66 e0       	ldi	r22, 0x06	; 6
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	95 d0       	rcall	.+298    	; 0x416 <__udivmodhi4>
 2ec:	08 2f       	mov	r16, r24
 2ee:	10 e0       	ldi	r17, 0x00	; 0
 2f0:	13 c0       	rjmp	.+38     	; 0x318 <LCDprogressBar+0x62>
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	18 9f       	mul	r17, r24
 2f6:	90 01       	movw	r18, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	c9 01       	movw	r24, r18
 2fc:	05 96       	adiw	r24, 0x05	; 5
 2fe:	c8 17       	cp	r28, r24
 300:	d9 07       	cpc	r29, r25
 302:	10 f0       	brcs	.+4      	; 0x308 <LCDprogressBar+0x52>
 304:	85 e0       	ldi	r24, 0x05	; 5
 306:	06 c0       	rjmp	.+12     	; 0x314 <LCDprogressBar+0x5e>
 308:	c2 17       	cp	r28, r18
 30a:	d3 07       	cpc	r29, r19
 30c:	10 f4       	brcc	.+4      	; 0x312 <LCDprogressBar+0x5c>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	01 c0       	rjmp	.+2      	; 0x314 <LCDprogressBar+0x5e>
 312:	80 2f       	mov	r24, r16
			}
		}
		else
		{
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 314:	f2 de       	rcall	.-540    	; 0xfa <LCDsendChar>
 316:	1f 5f       	subi	r17, 0xFF	; 255
 318:	1f 15       	cp	r17, r15
 31a:	59 f7       	brne	.-42     	; 0x2f2 <LCDprogressBar+0x3c>
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	08 95       	ret

00000328 <LCDinit>:
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 330:	80 e6       	ldi	r24, 0x60	; 96
 332:	9a ee       	ldi	r25, 0xEA	; 234
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCDinit+0xc>
 338:	12 ba       	out	0x12, r1	; 18
 33a:	15 ba       	out	0x15, r1	; 21
 33c:	81 b3       	in	r24, 0x11	; 17
 33e:	80 6f       	ori	r24, 0xF0	; 240
 340:	81 bb       	out	0x11, r24	; 17
 342:	84 b3       	in	r24, 0x14	; 20
 344:	87 60       	ori	r24, 0x07	; 7
 346:	84 bb       	out	0x14, r24	; 20
 348:	20 e3       	ldi	r18, 0x30	; 48
 34a:	22 bb       	out	0x12, r18	; 18
 34c:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 34e:	80 ea       	ldi	r24, 0xA0	; 160
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	fc 01       	movw	r30, r24
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCDinit+0x2c>
 358:	aa 98       	cbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35a:	fc 01       	movw	r30, r24
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCDinit+0x34>
 360:	22 bb       	out	0x12, r18	; 18
 362:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 364:	fc 01       	movw	r30, r24
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCDinit+0x3e>
 36a:	aa 98       	cbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 36c:	fc 01       	movw	r30, r24
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDinit+0x46>
 372:	20 e2       	ldi	r18, 0x20	; 32
 374:	22 bb       	out	0x12, r18	; 18
 376:	aa 9a       	sbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 378:	fc 01       	movw	r30, r24
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCDinit+0x52>
 37e:	aa 98       	cbi	0x15, 2	; 21
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCDinit+0x58>
 384:	88 e2       	ldi	r24, 0x28	; 40
 386:	d5 de       	rcall	.-598    	; 0x132 <LCDsendCommand>
 388:	8c e0       	ldi	r24, 0x0C	; 12
 38a:	d3 de       	rcall	.-602    	; 0x132 <LCDsendCommand>
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	0a e2       	ldi	r16, 0x2A	; 42
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	6c 2f       	mov	r22, r28
 396:	c8 01       	movw	r24, r16
 398:	27 df       	rcall	.-434    	; 0x1e8 <LCDdefinechar>
 39a:	21 96       	adiw	r28, 0x01	; 1
 39c:	08 5f       	subi	r16, 0xF8	; 248
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	c8 30       	cpi	r28, 0x08	; 8
 3a2:	d1 05       	cpc	r29, r1
 3a4:	b9 f7       	brne	.-18     	; 0x394 <LCDinit+0x6c>
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <puts>:
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	8c 01       	movw	r16, r24
 3ba:	e0 91 7a 00 	lds	r30, 0x007A
 3be:	f0 91 7b 00 	lds	r31, 0x007B
 3c2:	83 81       	ldd	r24, Z+3	; 0x03
 3c4:	81 ff       	sbrs	r24, 1
 3c6:	1f c0       	rjmp	.+62     	; 0x406 <puts+0x56>
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <puts+0x32>
 3ce:	fd 01       	movw	r30, r26
 3d0:	20 85       	ldd	r18, Z+8	; 0x08
 3d2:	31 85       	ldd	r19, Z+9	; 0x09
 3d4:	bd 01       	movw	r22, r26
 3d6:	f9 01       	movw	r30, r18
 3d8:	09 95       	icall
 3da:	89 2b       	or	r24, r25
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <puts+0x32>
 3de:	cf ef       	ldi	r28, 0xFF	; 255
 3e0:	df ef       	ldi	r29, 0xFF	; 255
 3e2:	f8 01       	movw	r30, r16
 3e4:	81 91       	ld	r24, Z+
 3e6:	8f 01       	movw	r16, r30
 3e8:	a0 91 7a 00 	lds	r26, 0x007A
 3ec:	b0 91 7b 00 	lds	r27, 0x007B
 3f0:	88 23       	and	r24, r24
 3f2:	69 f7       	brne	.-38     	; 0x3ce <puts+0x1e>
 3f4:	fd 01       	movw	r30, r26
 3f6:	20 85       	ldd	r18, Z+8	; 0x08
 3f8:	31 85       	ldd	r19, Z+9	; 0x09
 3fa:	bd 01       	movw	r22, r26
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	f9 01       	movw	r30, r18
 400:	09 95       	icall
 402:	89 2b       	or	r24, r25
 404:	11 f0       	breq	.+4      	; 0x40a <puts+0x5a>
 406:	cf ef       	ldi	r28, 0xFF	; 255
 408:	df ef       	ldi	r29, 0xFF	; 255
 40a:	ce 01       	movw	r24, r28
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <__udivmodhi4>:
 416:	aa 1b       	sub	r26, r26
 418:	bb 1b       	sub	r27, r27
 41a:	51 e1       	ldi	r21, 0x11	; 17
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__udivmodhi4_ep>

0000041e <__udivmodhi4_loop>:
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	a6 17       	cp	r26, r22
 424:	b7 07       	cpc	r27, r23
 426:	10 f0       	brcs	.+4      	; 0x42c <__udivmodhi4_ep>
 428:	a6 1b       	sub	r26, r22
 42a:	b7 0b       	sbc	r27, r23

0000042c <__udivmodhi4_ep>:
 42c:	88 1f       	adc	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	5a 95       	dec	r21
 432:	a9 f7       	brne	.-22     	; 0x41e <__udivmodhi4_loop>
 434:	80 95       	com	r24
 436:	90 95       	com	r25
 438:	bc 01       	movw	r22, r24
 43a:	cd 01       	movw	r24, r26
 43c:	08 95       	ret

0000043e <__divmodhi4>:
 43e:	97 fb       	bst	r25, 7
 440:	09 2e       	mov	r0, r25
 442:	07 26       	eor	r0, r23
 444:	0a d0       	rcall	.+20     	; 0x45a <__divmodhi4_neg1>
 446:	77 fd       	sbrc	r23, 7
 448:	04 d0       	rcall	.+8      	; 0x452 <__divmodhi4_neg2>
 44a:	e5 df       	rcall	.-54     	; 0x416 <__udivmodhi4>
 44c:	06 d0       	rcall	.+12     	; 0x45a <__divmodhi4_neg1>
 44e:	00 20       	and	r0, r0
 450:	1a f4       	brpl	.+6      	; 0x458 <__divmodhi4_exit>

00000452 <__divmodhi4_neg2>:
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255

00000458 <__divmodhi4_exit>:
 458:	08 95       	ret

0000045a <__divmodhi4_neg1>:
 45a:	f6 f7       	brtc	.-4      	; 0x458 <__divmodhi4_exit>
 45c:	90 95       	com	r25
 45e:	81 95       	neg	r24
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <_exit>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <_exit>
